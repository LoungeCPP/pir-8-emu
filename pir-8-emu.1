.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "PIR\-8\-EMU" "1" "August 2019" "Lounge<C++>" ""
.
.SH "NAME"
\fBpir\-8\-emu\fR \- Emulator of the pir\-8
.
.SH "SYNOPSIS"
\fBpir\-8\-emu\fR [CONFIG_DIR]
.
.SH "DESCRIPTION"
Implementation of the pir\-8 ISA\.
.
.P
First, compile your source code with pir\-8\-as(1)\.
.
.P
Alternatively, check the content of a binary with pir\-8\-disasm(1)\.
.
.P
To emulate, open pir\-8\-emu(1) and press \fICtrl+O\fR to open a binary, then \fISpace\fR to execute step\-by\-step\. For more usage consult the in\-emulator help available after pressing \fIF1\fR, or detailed below\.
.
.P
Read values appear green, and written ones appear red\.
.
.SH "CONTROLS"
.
.nf

General key mappings:
  F1     – Show this help message
  Ctrl+O – Open a memory image and reset the emulation therewith
  Ctrl+C – Close the emulator

Execution key mappings:
  Ctrl+B      – Add a breakpoint
  Ctrl+G      – Remove a breakpoint
  Escape      – Clear active breakpoint
  Ctrl+U      – Update a memory address
  Ctrl+J      – Read in a memory address, finish current μOps, and jump thereto
  Space       – Perform the highlighted μOp if execute full instructions is OFF,
                otherwise execute the current instruction
  Shift+Space – Read in a frequency and press Space thereat
  Ctrl+Space  – Silently execute until input/end/breakpoint

Port\-related key mappings:
  Ctrl+R – Read a byte from a port
  Ctrl+W – Write a byte to a port
  Ctrl+I – Install a native port handler
  Ctrl+K – Uninstall a port handler

Config key mappings:
  Ctrl+Shift+A – Toggle auto load next instruction
  Ctrl+Shift+F – Toggle execute full instructions
  Ctrl+Shift+R – Rename general\-purpose registers
.
.fi
.
.SH "PORT HANDLERS"
The \fBpir\-8\-emu\fR library supports all sorts of handlers that can take control of a \fBpir\-8\fR port\. However, as recompiling to change a handler would be less than ideal for a real\-time emulator, this emulator allows installing native port handlers\.
.
.P
A native port handler is any dynamically\-loaded library that provides the following interface:
.
.IP "" 4
.
.nf

/// Get the amount of ports this handler handles
///
/// Returning `0` from this funxion will panic the emulator
unsigned char pir_8_emu_port_count();

/// Initialise the handler state with the specified ports
///
/// The returned value will be passed in the following funxions as the `state` argument
void * pir_8_emu_init(const unsigned char * ports, unsigned char ports_len);

/// Release all resources associated with the specified state
void pir_8_emu_uninit(void * state);

/// Handle the program reading from one of the handled ports
unsigned char pir_8_emu_handle_read(void * state, unsigned char port);

/// Handle the program writing to one of the handled ports
void pir_8_emu_handle_write(void * state, unsigned char port, unsigned char byte);
.
.fi
.
.IP "" 0
.
.P
Also available as \fBinclude/pir\-8\-emu/port_handler\.h\fR \fIhttps://github\.com/LoungeCPP/pir\-8\-emu/blob/master/include/pir\-8\-emu/port_handler\.h\fR in the git repo\.
.
.P
For more information about native port handlers visit the \fBRawNativePortHandler\fR \fIhttps://rawcdn\.githack\.com/LoungeCPP/pir\-8\-emu/doc/pir_8_emu/binutils/pir_8_emu/struct\.RawNativePortHandler\.html\fR doc page\.
.
.P
For more information about port handlers in general visit the \fBPorts\fR \fIhttps://rawcdn\.githack\.com/LoungeCPP/pir\-8\-emu/doc/pir_8_emu/vm/struct\.Ports\.html\fR doc page
.
.SH "OPTIONS"
CONFIG_DIR
.
.IP "" 4
.
.nf

Directory containing configuration files

Default: $HOME/\.pir\-8\-emu/
.
.fi
.
.IP "" 0
.
.SH "AUTHOR"
Written by nabijaczleweli <\fInabijaczleweli@gmail\.com\fR>
.
.SH "SPECIAL THANKS"
To all who support further development, in particular:
.
.IP "\(bu" 4
ThePhD
.
.IP "" 0
.
.SH "REPORTING BUGS"
<\fIhttps://github\.com/LoungeCPP/pir\-8\-emu/issues\fR>
.
.SH "SEE ALSO"
<\fIhttps://github\.com/LoungeCPP/pir\-8\-emu\fR>
